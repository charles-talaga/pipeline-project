services:
# Airflow: initialize database, create admin user
  airflow-init:
    image: apache/airflow:latest
    networks:
      - airflow
    depends_on:
      airflow-db:
        condition: service_healthy
    environment: 
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db/airflow
    command: >
      bash -c "airflow db init && airflow users create 
      --username admin 
      --password admin 
      --firstname Charles 
      --lastname Talaga 
      --role Admin 
      --email charlesftalaga@gmail.com"

# Airflow: webserver
  airflow-webserver:
    build:
      context: .
      dockerfile: airflow/webserver/Dockerfile
    networks:
      - airflow
    depends_on:
      supply-chain-db:
        condition: service_healthy
    restart: on-failure:3
    environment: 
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY} # python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
    ports:
      - "8080:8080"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
    volumes:
      - ./dags:/opt/airflow/dags
    command: webserver

# Airflow: scheduler
  airflow-scheduler:
    build:
      context: .
      dockerfile: airflow/scheduler/Dockerfile
    networks:
      - airflow
    depends_on:
      supply-chain-db:
        condition: service_healthy
    restart: on-failure:3
    environment: 
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
    volumes:
      - ./dags:/opt/airflow/dags
    command: scheduler

# Airflow: postgres database for storing metadata
  airflow-db:
    image: postgres:latest
    networks:
      - airflow
    environment:
      POSTGRES_USER: airflow   
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

# Supply chain: postgres database for storing simulated supply chain data
  supply-chain-db:
    build:
      context: .
      dockerfile: ./db-init/Dockerfile
    networks:
      - airflow
    ports:
      - "5432:5432"
    depends_on:
      - airflow-init
    environment:
      POSTGRES_USER: ${SUPPLY_DB_USER}
      POSTGRES_PASSWORD: ${SUPPLY_DB_PASSWORD}
      POSTGRES_DB: ${SUPPLY_DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SUPPLY_DB_USER} -d ${SUPPLY_DB_NAME}"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    volumes:
      - supply-chain-data:/var/lib/postgresql/data

networks:
  airflow:
    driver: bridge 

volumes:
  supply-chain-data: 